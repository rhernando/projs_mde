/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.petrinet.mydsl1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.petrinet.mydsl1.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.petrinet.mydsl1.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "RedPetri";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleRedPetri
entryRuleRedPetri returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRedPetriRule()); }
	 iv_ruleRedPetri=ruleRedPetri 
	 { $current=$iv_ruleRedPetri.current; } 
	 EOF 
;

// Rule RedPetri
ruleRedPetri returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRedPetriAccess().getRedPetriAction_0(),
            $current);
    }
)	otherlv_1='RedPetri' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRedPetriAccess().getRedPetriKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRedPetriAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRedPetriAccess().getIniTransTransitionParserRuleCall_3_0()); 
	    }
		lv_iniTrans_3_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRedPetriRule());
	        }
       		add(
       			$current, 
       			"iniTrans",
        		lv_iniTrans_3_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getRedPetriAccess().getIniPlacePlaceParserRuleCall_4_0()); 
	    }
		lv_iniPlace_4_0=rulePlace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRedPetriRule());
	        }
       		add(
       			$current, 
       			"iniPlace",
        		lv_iniPlace_4_0, 
        		"Place");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRedPetriAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRulePlace
entryRulePlace returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlaceRule()); }
	 iv_rulePlace=rulePlace 
	 { $current=$iv_rulePlace.current; } 
	 EOF 
;

// Rule Place
rulePlace returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPlaceAccess().getPlaceAction_0(),
            $current);
    }
)	otherlv_1='Place' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPlaceAccess().getPlaceKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlaceAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlaceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPlaceAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='tokens' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlaceAccess().getTokensKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPlaceAccess().getTokensEIntParserRuleCall_4_1_0()); 
	    }
		lv_tokens_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlaceRule());
	        }
       		set(
       			$current, 
       			"tokens",
        		lv_tokens_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='connection' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPlaceAccess().getConnectionKeyword_5_0());
    }
	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPlaceAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPlaceAccess().getConnectionTransitionCrossReference_5_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPlaceAccess().getCommaKeyword_5_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPlaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getPlaceAccess().getConnectionTransitionCrossReference_5_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPlaceAccess().getRightParenthesisKeyword_5_4());
    }
)?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPlaceAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransitionAccess().getTransitionAction_0(),
            $current);
    }
)	otherlv_1='Transition' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getTransitionKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='connection' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTransitionAccess().getConnectionKeyword_4_0());
    }
	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getConnectionPlaceCrossReference_4_2_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionAccess().getCommaKeyword_4_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getConnectionPlaceCrossReference_4_3_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransitionAccess().getRightParenthesisKeyword_4_4());
    }
)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTransitionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


