/*
* generated by Xtext
*/

package org.xtext.petrinet.mydsl1.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RedPetriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RedPetri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRedPetriAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRedPetriKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIniTransAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIniTransTransitionParserRuleCall_3_0 = (RuleCall)cIniTransAssignment_3.eContents().get(0);
		private final Assignment cIniPlaceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIniPlacePlaceParserRuleCall_4_0 = (RuleCall)cIniPlaceAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RedPetri:
		//	{RedPetri} "RedPetri" "{" iniTrans+=Transition? iniPlace+=Place? "}";
		public ParserRule getRule() { return rule; }

		//{RedPetri} "RedPetri" "{" iniTrans+=Transition? iniPlace+=Place? "}"
		public Group getGroup() { return cGroup; }

		//{RedPetri}
		public Action getRedPetriAction_0() { return cRedPetriAction_0; }

		//"RedPetri"
		public Keyword getRedPetriKeyword_1() { return cRedPetriKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//iniTrans+=Transition?
		public Assignment getIniTransAssignment_3() { return cIniTransAssignment_3; }

		//Transition
		public RuleCall getIniTransTransitionParserRuleCall_3_0() { return cIniTransTransitionParserRuleCall_3_0; }

		//iniPlace+=Place?
		public Assignment getIniPlaceAssignment_4() { return cIniPlaceAssignment_4; }

		//Place
		public RuleCall getIniPlacePlaceParserRuleCall_4_0() { return cIniPlacePlaceParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Place");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPlaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPlaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTokensKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTokensAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTokensEIntParserRuleCall_4_1_0 = (RuleCall)cTokensAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConnectionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConnectionAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cConnectionTransitionCrossReference_5_2_0 = (CrossReference)cConnectionAssignment_5_2.eContents().get(0);
		private final RuleCall cConnectionTransitionEStringParserRuleCall_5_2_0_1 = (RuleCall)cConnectionTransitionCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cConnectionAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cConnectionTransitionCrossReference_5_3_1_0 = (CrossReference)cConnectionAssignment_5_3_1.eContents().get(0);
		private final RuleCall cConnectionTransitionEStringParserRuleCall_5_3_1_0_1 = (RuleCall)cConnectionTransitionCrossReference_5_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Place:
		//	{Place} "Place" name=EString "{" ("tokens" tokens=EInt)? ("connection" "(" connection+=[Transition|EString] (","
		//	connection+=[Transition|EString])* ")")? "}";
		public ParserRule getRule() { return rule; }

		//{Place} "Place" name=EString "{" ("tokens" tokens=EInt)? ("connection" "(" connection+=[Transition|EString] (","
		//connection+=[Transition|EString])* ")")? "}"
		public Group getGroup() { return cGroup; }

		//{Place}
		public Action getPlaceAction_0() { return cPlaceAction_0; }

		//"Place"
		public Keyword getPlaceKeyword_1() { return cPlaceKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("tokens" tokens=EInt)?
		public Group getGroup_4() { return cGroup_4; }

		//"tokens"
		public Keyword getTokensKeyword_4_0() { return cTokensKeyword_4_0; }

		//tokens=EInt
		public Assignment getTokensAssignment_4_1() { return cTokensAssignment_4_1; }

		//EInt
		public RuleCall getTokensEIntParserRuleCall_4_1_0() { return cTokensEIntParserRuleCall_4_1_0; }

		//("connection" "(" connection+=[Transition|EString] ("," connection+=[Transition|EString])* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"connection"
		public Keyword getConnectionKeyword_5_0() { return cConnectionKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//connection+=[Transition|EString]
		public Assignment getConnectionAssignment_5_2() { return cConnectionAssignment_5_2; }

		//[Transition|EString]
		public CrossReference getConnectionTransitionCrossReference_5_2_0() { return cConnectionTransitionCrossReference_5_2_0; }

		//EString
		public RuleCall getConnectionTransitionEStringParserRuleCall_5_2_0_1() { return cConnectionTransitionEStringParserRuleCall_5_2_0_1; }

		//("," connection+=[Transition|EString])*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//connection+=[Transition|EString]
		public Assignment getConnectionAssignment_5_3_1() { return cConnectionAssignment_5_3_1; }

		//[Transition|EString]
		public CrossReference getConnectionTransitionCrossReference_5_3_1_0() { return cConnectionTransitionCrossReference_5_3_1_0; }

		//EString
		public RuleCall getConnectionTransitionEStringParserRuleCall_5_3_1_0_1() { return cConnectionTransitionEStringParserRuleCall_5_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTransitionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConnectionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConnectionAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cConnectionPlaceCrossReference_4_2_0 = (CrossReference)cConnectionAssignment_4_2.eContents().get(0);
		private final RuleCall cConnectionPlaceEStringParserRuleCall_4_2_0_1 = (RuleCall)cConnectionPlaceCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cConnectionAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cConnectionPlaceCrossReference_4_3_1_0 = (CrossReference)cConnectionAssignment_4_3_1.eContents().get(0);
		private final RuleCall cConnectionPlaceEStringParserRuleCall_4_3_1_0_1 = (RuleCall)cConnectionPlaceCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Transition:
		//	{Transition} "Transition" name=EString "{" ("connection" "(" connection+=[Place|EString] (","
		//	connection+=[Place|EString])* ")")? "}";
		public ParserRule getRule() { return rule; }

		//{Transition} "Transition" name=EString "{" ("connection" "(" connection+=[Place|EString] (","
		//connection+=[Place|EString])* ")")? "}"
		public Group getGroup() { return cGroup; }

		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }

		//"Transition"
		public Keyword getTransitionKeyword_1() { return cTransitionKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("connection" "(" connection+=[Place|EString] ("," connection+=[Place|EString])* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"connection"
		public Keyword getConnectionKeyword_4_0() { return cConnectionKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//connection+=[Place|EString]
		public Assignment getConnectionAssignment_4_2() { return cConnectionAssignment_4_2; }

		//[Place|EString]
		public CrossReference getConnectionPlaceCrossReference_4_2_0() { return cConnectionPlaceCrossReference_4_2_0; }

		//EString
		public RuleCall getConnectionPlaceEStringParserRuleCall_4_2_0_1() { return cConnectionPlaceEStringParserRuleCall_4_2_0_1; }

		//("," connection+=[Place|EString])*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//connection+=[Place|EString]
		public Assignment getConnectionAssignment_4_3_1() { return cConnectionAssignment_4_3_1; }

		//[Place|EString]
		public CrossReference getConnectionPlaceCrossReference_4_3_1_0() { return cConnectionPlaceCrossReference_4_3_1_0; }

		//EString
		public RuleCall getConnectionPlaceEStringParserRuleCall_4_3_1_0_1() { return cConnectionPlaceEStringParserRuleCall_4_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	
	
	private RedPetriElements pRedPetri;
	private PlaceElements pPlace;
	private EStringElements pEString;
	private EIntElements pEInt;
	private TransitionElements pTransition;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.petrinet.mydsl1.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RedPetri:
	//	{RedPetri} "RedPetri" "{" iniTrans+=Transition? iniPlace+=Place? "}";
	public RedPetriElements getRedPetriAccess() {
		return (pRedPetri != null) ? pRedPetri : (pRedPetri = new RedPetriElements());
	}
	
	public ParserRule getRedPetriRule() {
		return getRedPetriAccess().getRule();
	}

	//Place:
	//	{Place} "Place" name=EString "{" ("tokens" tokens=EInt)? ("connection" "(" connection+=[Transition|EString] (","
	//	connection+=[Transition|EString])* ")")? "}";
	public PlaceElements getPlaceAccess() {
		return (pPlace != null) ? pPlace : (pPlace = new PlaceElements());
	}
	
	public ParserRule getPlaceRule() {
		return getPlaceAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//Transition:
	//	{Transition} "Transition" name=EString "{" ("connection" "(" connection+=[Place|EString] (","
	//	connection+=[Place|EString])* ")")? "}";
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
